from aiogram import Router
from aiogram.types import Message
from aiogram.filters.command import Command
from states import Form
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from norms import norm_water, norm_calories
import re
from —Åalories_activity import NutritionixAPI
from datetime import datetime
from plot_graph import plot_water, plot_calories

router = Router()
users = {}


@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n"
                         "–Ø –ø–æ–º–æ–≥–∞—é —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–Ω–µ–≤–Ω—ã–µ –Ω–æ—Ä–º—ã –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –ø–∏—Ç–∞–Ω–∏–µ!\n"
                         "–ù–∞—á–Ω–∏—Ç–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è - /set_profile\n"
                         "–í—Å–µ –∫–æ–º–∞–Ω–¥—ã: /help")


@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.reply(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/set_profile - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è\n"
        "/show_profile - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/log_water - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥—ã\n"
        "/log_food - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –µ–¥—ã\n"
        "/log_workout - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "/check_progress - –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –≤–æ–¥–µ –∏ –∫–∞–ª–æ—Ä–∏—è–º\n"
        "/norms - –ù–æ—Ä–º—ã –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π\n"
        "/plot_water_progress - –ì—Ä–∞—Ñ–∏–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã\n"
        "/plot_calories_progress - –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π"

    )


@router.message(Command("set_profile"))
async def start_set_profile(message: Message, state: FSMContext):
    await message.reply("‚öñÔ∏è–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥)")
    await state.set_state(Form.weight)


@router.message(Form.weight)
async def proc_profile_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text)
        if 20 <= weight <= 200:
            await state.update_data(weight=weight)
            await message.reply("üìè–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º)")
            await state.set_state(Form.height)
        else:
            await message.reply(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –æ—Ç 20 –¥–æ 200 –∫–≥. "
            )
    except ValueError:
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 20 –¥–æ 200"
        )


@router.message(Form.height)
async def proc_profile_height(message: Message, state: FSMContext):
    try:
        height = float(message.text)
        if 50 <= height <= 220:
            await state.update_data(height=height)
            await message.reply("üëï–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª - –º (–º—É–∂—á–∏–Ω–∞) –∏–ª–∏ –∂ (–∂–µ–Ω—â–∏–Ω–∞)")
            await state.set_state(Form.gender)
        else:
            await message.reply(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç –æ—Ç 50 –¥–æ 220 —Å–º "
            )
    except ValueError:
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 50 –¥–æ 220"
        )


@router.message(Form.gender)
async def proc_profile_age(message: Message, state: FSMContext):
    try:
        gender = str(message.text)
        if gender == "–º":
            genders = "–º—É–∂—á–∏–Ω–∞"
            await state.update_data(gender=genders)
            await state.set_state(Form.age)
            await message.reply("üë∂–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç")

        elif gender == "–∂":
            genders = "–∂–µ–Ω—â–∏–Ω–∞"
            await state.update_data(gender=genders)
            await state.set_state(Form.age)
            await message.reply("üë∂–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç")
        else:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –ø–æ–ª–∞")

    except ValueError:
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–ª (–º/–∂)"
        )


@router.message(Form.age)
async def proc_profile_minutes(message: Message, state: FSMContext):
    try:
        age = float(message.text)
        if 18 <= age <= 150:
            await state.update_data(age=age)
            await message.reply("üïò–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
            await state.set_state(Form.minutes)
        else:
            await message.reply(
                "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º –æ—Ç 18 –¥–æ 150"
            )
    except ValueError:
        await message.reply(
            "–í–æ–∑—Ä–∞—Å—Ç –≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 18 –¥–æ 150"
        )


@router.message(Form.minutes)
async def proc_profile_city(message: Message, state: FSMContext):
    try:
        minutes = float(message.text)
        if 0 <= minutes < 1440:
            await state.update_data(minutes=minutes)
            await message.reply("üåÉ –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
            await state.set_state(Form.city)
        else:
            await message.reply(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
            )
    except ValueError:
        await message.reply(
            "–í—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –º–∏–Ω—É—Ç–∞—Ö"
        )


@router.message(Form.city)
async def profile(message: Message, state: FSMContext):
    try:
        city = str(message.text)
        pattern = '[–∞-—è–ê-–Øa-zA-Z]+$'
        a = re.findall(pattern, city)
        if len(a) != 0 and 2 <= len(city) <= 170:
            data = await state.get_data()
            user_id = message.from_user.id
            weight = data.get("weight")
            height = data.get("height")
            gender = data.get("gender")
            age = data.get("age")
            minutes = data.get("minutes")
            city = city
            water = await norm_water(weight, int(minutes), str(city))
            calories = norm_calories(float(weight), gender, int(age), int(minutes))

            await message.reply(f"‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω:\n "
                                f"–í–µ—Å: {weight} –∫–≥ \n "
                                f"–†–æ—Å—Ç: {height} —Å–º \n "
                                f"–í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç \n "
                                f"–ü–æ–ª: {gender}  \n "
                                f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {minutes} –º–∏–Ω \n "
                                f"–ì–æ—Ä–æ–¥: {city} \n\n "
                                f"–ù–æ—Ä–º–∞ –≤–æ–¥—ã –≤ –¥–µ–Ω—å: {water} –º–ª \n "
                                f"–ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å: {calories:.2f} –∫–∫–∞–ª \n ")
            await state.clear()

            users[user_id] = {
                "weight": weight,
                "height": height,
                "age": age,
                "gender": gender,
                "activity": minutes,
                "city": city,
                "water_goal": water,
                "calorie_goal": calories,
                "logged_water": 0,
                "logged_calories": 0,
                "burned_calories": 0,
                "workouts": [],
                "foods": []
            }
        else:
            await message.reply(
                "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –±—É–∫–≤–∞–º–∏, –¥–ª–∏–Ω–∞ –æ—Ç 2 –¥–æ 170"
            )

    except ValueError:
        await message.reply(
            "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –±—É–∫–≤–∞–º–∏, –¥–ª–∏–Ω–∞ –æ—Ç 2 –¥–æ 170"
        )


@router.message(Command("show_profile"))
async def water_progress(message: Message):
    if message.from_user.id not in users:
        await message.reply("‚ùóÔ∏è–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    user_data = users[message.from_user.id]
    await message.reply(f"üíº –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: \n"
                        f"–í–µ—Å: {user_data['weight']} –∫–≥ \n"
                        f"–†–æ—Å—Ç: {user_data['height']} —Å–º \n"
                        f"–í–æ–∑—Ä–∞—Å—Ç: {user_data['age']} –ª–µ—Ç \n"
                        f"–ü–æ–ª: {user_data['gender']} \n"
                        f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user_data['activity']} –º–∏–Ω \n"
                        f"–ì–æ—Ä–æ–¥: {user_data['city']} \n\n"
                        f"–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {user_data['burned_calories']:.2f}\n"
                        f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {user_data['workouts']}\n"
                        f"–ß—Ç–æ –±—ã–ª–æ —Å—ä–µ–¥–µ–Ω–æ: {user_data['foods']}\n"
                        f"–ù–æ—Ä–º–∞ –≤–æ–¥—ã –≤ –¥–µ–Ω—å: {user_data['water_goal']:.2f} –º–ª \n"
                        f"–ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å: {user_data['calorie_goal']:.2f} –∫–∫–∞–ª \n")


@router.message(Command("log_water"))
async def log_water(message: Message, state: FSMContext):
    if message.from_user.id not in users:
        await message.reply("‚ùóÔ∏è–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    try:
        _, water_amount = message.text.split()
        water_amount = int(water_amount)
    except (ValueError, TypeError):
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
        return

    user_data = users[message.from_user.id]

    if 'water_log_history' not in user_data:
        user_data['water_log_history'] = []

    water_entry = {
        'amount': user_data['logged_water'] + water_amount,
        'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }

    user_data['water_log_history'].append(water_entry)
    user_data['logged_water'] += water_amount
    remaining_water = max(0, user_data['water_goal'] - user_data['logged_water'])

    await message.reply(
        f"–í—ã –≤—ã–ø–∏–ª–∏ {water_amount:.2f} –º–ª –≤–æ–¥—ã.\n"
        f"–¶–µ–ª—å –ø–æ –≤–æ–¥–µ: {user_data['water_goal']:.2f} –º–ª\n"
        f"–í—ã–ø–∏—Ç–æ: {user_data['logged_water']:.2f} –º–ª\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–ø–∏—Ç—å: {remaining_water:.2f} –º–ª"
    )
    await state.clear()

    if user_data['logged_water'] >= user_data['water_goal']:
        await message.reply("üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º—ã –≤–æ–¥—ã!")


@router.message(Command("log_food"))
async def log_food(message: Message, state: FSMContext):
    if message.from_user.id not in users:
        await message.reply("‚ùóÔ∏è–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    try:
        _, food = message.text.split()
        nutritionix_api = NutritionixAPI()
        meal = await nutritionix_api.search_food(food)
        if meal:
            await state.update_data(
                food_name=meal["original_query"],
                calories_per_100g=meal["calories"]
            )

            await state.set_state(Form.food_weight)
            meal_f = meal["original_query"]
            meal_c = meal["calories"]

            await message.reply(
                f"–ía—à–µ –±–ª—é–¥–æ: {meal_f}\n"
                f"–ö–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100 –≥—Ä–∞–º–º: {meal_c:.2f}\n"
                f"–°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?"
            )

            user_data = users[message.from_user.id]
            user_data['foods'].append([meal_f, meal_c])

        else:
            await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ")
    except (ValueError, TypeError):
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /log_food <–±–ª—é–¥–æ>")
        return


@router.message(Form.food_weight)
async def process_food_weight(message: Message, state: FSMContext):
    try:
        weight = float(message.text.replace(',', '.'))
        data = await state.get_data()
        calories_per_100g = data['calories_per_100g']
        calories_consumed = round((calories_per_100g * weight) / 100, 1)
        user_data = users[message.from_user.id]

        calories_entry = {
            'amount': user_data['logged_calories'] + calories_consumed,
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

        if 'calorie_log_history' not in user_data:
            user_data['calorie_log_history'] = []
        user_data['calorie_log_history'].append(calories_entry)
        user_data['logged_calories'] += calories_consumed

        await message.reply(
            f"–ó–∞–ø–∏—Å–∞–Ω–æ: {calories_consumed:.2f} –∫–∫–∞–ª.\n"
            f"–í—Å–µ–≥–æ —Å—ä–µ–¥–µ–Ω–æ –∑–∞ –¥–µ–Ω—å: {user_data['logged_calories']:.2f} –∫–∫–∞–ª"
        )
        if user_data['logged_calories'] > user_data['calorie_goal']:
            await message.reply(
                "‚ö†Ô∏è –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π! "
                f"–û—Å—Ç–∞–ª–æ—Å—å: {(user_data['calorie_goal'] - user_data['logged_calories']):.2f} –∫–∫–∞–ª"
            )
        await state.clear()

    except ValueError:
        await message.reply(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö. "
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 150 –∏–ª–∏ 75.5"
        )


@router.message(Command("log_workout"))
async def log_food(message: Message, state: FSMContext):
    if message.from_user.id not in users:
        await message.reply("‚ùóÔ∏è–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    try:
        user_data = users[message.from_user.id]
        _, activity, duration_min = message.text.split()
        nutritionix_api = NutritionixAPI()
        workout = await nutritionix_api.calculate_calories_burned(activity, duration_min, user_data["weight"])

        if workout:
            burned_calories = workout["calories_burned"]
            activity = workout["description"]
            time = workout["duration_min"]

            if 'calorie_log_history' not in user_data:
                user_data['calorie_log_history'] = []

            calories_entry = {
                'amount': user_data['logged_calories'] - burned_calories,
                'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }

            user_data['calorie_log_history'].append(calories_entry)
            user_data['workouts'].append([activity, time])
            user_data['burned_calories'] += float(burned_calories)
            add_water = float(time) * 200 / 30
            user_data['water_goal'] += add_water

            await message.reply(
                f"{activity} {time} –º–∏–Ω—É—Ç - {burned_calories:.2f} –∫–∫–∞–ª\n"
                f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {add_water:.2f} –º–ª –≤–æ–¥—ã\n"
            )
            await state.clear()

        else:
            await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å")

    except (ValueError, TypeError):
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /log_workout  <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è (–º–∏–Ω)>")
        return


@router.message(Command("norms"))
async def log_food(message: Message, state: FSMContext):
    if message.from_user.id not in users:
        await message.reply("‚ùóÔ∏è–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return
    user_data = users[message.from_user.id]
    await message.reply(
        f"–í–∞–º –Ω—É–∂–Ω–æ –ø–∏—Ç—å –Ω–µ –º–µ–Ω–µ–µ {user_data['water_goal']:.2f} –º–ª –≤–æ–¥—ã –≤ –¥–µ–Ω—å\n"
        f"–ù–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π –≤ –¥–µ–Ω—å: {user_data['calorie_goal']:.2f} –∫–∫–∞–ª\n"
    )


@router.message(Command("check_progress"))
async def log_food(message: Message, state: FSMContext):
    if message.from_user.id not in users:
        await message.reply("‚ùóÔ∏è–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    user_data = users[message.from_user.id]
    await message.reply(
        f"üìä–ü—Ä–æ–≥—Ä–µ—Å—Å:\n\n"
        f"üí¶–í–æ–¥–∞:\n"
        f"–í—ã–ø–∏—Ç–æ: {user_data['logged_water']:.2f} –º–ª –∏–∑ {user_data['water_goal']:.2f} –º–ª \n\n"
        f"üî•–ö–∞–ª–æ—Ä–∏–∏:\n"
        f"–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user_data['logged_calories']:.2f} –∫–∫–∞–ª –∏–∑ {user_data['calorie_goal']:.2f} –∫–∫–∞–ª\n"
        f"–°–æ–∂–∂–µ–Ω–æ: {user_data['burned_calories']:.2f} –∫–∫–∞–ª\n"
        f"–ë–∞–ª–∞–Ω—Å: {(user_data['logged_calories'] - user_data['burned_calories']):.2f} –∫–∫–∞–ª\n"

    )


@router.message(Command("plot_water_progress"))
async def water_progress(message: Message):
    if message.from_user.id not in users:
        await message.reply("‚ùóÔ∏è–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    user_data = users[message.from_user.id]
    if 'water_log_history' not in user_data or len(user_data['water_log_history']) < 2:
        await message.reply(
            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –∑–∞–ø–∏—Å–∏ –æ –≤–æ–¥–µ —á–µ—Ä–µ–∑ /log_water <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
        return

    try:
        plot_file = plot_water(user_data)

        await message.answer_photo(
            photo=FSInputFile(plot_file),
            caption=(
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã\n"
                f"–¶–µ–ª—å: {user_data['water_goal']:.2f} –º–ª\n"
                f"–í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: {user_data['logged_water']:.2f} –º–ª"
            )
        )

    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")


@router.message(Command("plot_calories_progress"))
async def water_progress(message: Message):
    if message.from_user.id not in users:
        await message.reply("‚ùóÔ∏è–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é /set_profile")
        return

    user_data = users[message.from_user.id]
    if 'calorie_log_history' not in user_data or len(user_data['calorie_log_history']) < 2:
        await message.reply(
            "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞. –î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –∑–∞–ø–∏—Å–∏ –æ –∫–∞–ª–æ—Ä–∏—è—Ö —á–µ—Ä–µ–∑ /log_food <–±–ª—é–¥–æ>")
        return

    try:
        plot_file = plot_calories(user_data)

        await message.answer_photo(
            photo=FSInputFile(plot_file),
            caption=(
                f"üî•–ö–∞–ª–æ—Ä–∏–∏:\n"
                f"–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user_data['logged_calories']:.2f} –∫–∫–∞–ª –∏–∑ {user_data['calorie_goal']:.2f} –∫–∫–∞–ª\n"
                f"–°–æ–∂–∂–µ–Ω–æ: {user_data['burned_calories']:.2f} –∫–∫–∞–ª\n"
                f"–ë–∞–ª–∞–Ω—Å: {(user_data['logged_calories'] - user_data['burned_calories']):.2f} –∫–∫–∞–ª\n"
            )
        )

    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")
